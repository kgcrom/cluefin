name: Release Pipeline

"on":
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run full test suite
      env:
        KIWOOM_API_KEY: ${{ secrets.KIWOOM_API_KEY }}
        KIWOOM_SECRET_KEY: ${{ secrets.KIWOOM_SECRET_KEY }}
        KRX_API_KEY: ${{ secrets.KRX_API_KEY }}
        TEST_ENVIRONMENT: ${{ vars.TEST_ENVIRONMENT || 'production' }}
        LOG_LEVEL: ${{ vars.LOG_LEVEL || 'WARNING' }}
      run: |
        uv run pytest packages/cluefin-openapi/tests/ -v --tb=short

  build-and-publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Build package
      run: |
        cd packages/cluefin-openapi
        uv build
        
    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd packages/cluefin-openapi
        uv publish --token $PYPI_TOKEN
        
    - name: Publish to Test PyPI
      if: github.event.inputs.environment == 'staging'
      env:
        TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        cd packages/cluefin-openapi
        uv publish --repository testpypi --token $TEST_PYPI_TOKEN

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    needs: build-and-publish
    if: vars.ENABLE_DEPLOYMENT == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to environment
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      run: |
        echo "Deploying to $ENVIRONMENT environment"
        echo "Host: $DEPLOY_HOST"
        echo "Database configured: $([ -n "$DATABASE_URL" ] && echo "Yes" || echo "No")"
        echo "Redis configured: $([ -n "$REDIS_URL" ] && echo "Yes" || echo "No")"
        # Actual deployment commands would go here
        
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-publish, deploy]
    if: always()
    
    steps:
    - name: Notify release success
      if: needs.validate.result == 'success' && needs.build-and-publish.result == 'success'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
      run: |
        echo "Release completed successfully!"
        if [ -n "$SLACK_WEBHOOK" ]; then
          echo "Would notify Slack about successful release"
        fi
        
    - name: Notify release failure
      if: needs.validate.result == 'failure' || needs.build-and-publish.result == 'failure'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
      run: |
        echo "Release failed!"
        if [ -n "$SLACK_WEBHOOK" ]; then
          echo "Would notify Slack about failed release"
        fi

