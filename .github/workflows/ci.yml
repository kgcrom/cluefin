name: CI Pipeline

"on":
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run ruff linter
      run: |
        uv run ruff check .
        
    - name: Run ruff formatter check
      run: |
        uv run ruff format --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        
    - name: Install dependencies
      run: |
        uv sync --all-packages
        
    - name: Create test environment file
      run: |
        cp packages/cluefin-openapi/.env.sample packages/cluefin-openapi/.env
        
    - name: Run unit tests
      env:
        # Environment variables
        TEST_ENVIRONMENT: ${{ vars.TEST_ENVIRONMENT || 'development' }}
        LOG_LEVEL: ${{ vars.LOG_LEVEL || 'INFO' }}
        ENABLE_INTEGRATION_TESTS: ${{ vars.ENABLE_INTEGRATION_TESTS || 'false' }}
      run: |
        uv run pytest -m "not integration"
        
    - name: Run integration tests
      if: vars.ENABLE_INTEGRATION_TESTS == 'true'
      env:
        KIWOOM_API_KEY: ${{ secrets.KIWOOM_API_KEY }}
        KIWOOM_SECRET_KEY: ${{ secrets.KIWOOM_SECRET_KEY }}
        KRX_API_KEY: ${{ secrets.KRX_API_KEY }}
        TEST_ENVIRONMENT: ${{ vars.TEST_ENVIRONMENT || 'development' }}
        LOG_LEVEL: ${{ vars.LOG_LEVEL || 'DEBUG' }}
      run: |
        uv run pytest -m "integration" -v --tb=short

  coverage:
    name: Codacy Coverage Report
    runs-on: ubuntu-latest
    environment: development
    needs: test 
    if: needs.test.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: |
          uv sync --all-packages
      
      - name: Generate coverage report
        run: |
          uv run coverage run -m pytest -m "not integration"
          uv run coverage xml
      
      - name: Upload coverage to Codecov
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: kgcrom
          CODACY_PROJECT_NAME: cluefin
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Python -r coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        
    - name: Install dependencies
      run: |
        uv sync --all-packages
        
    - name: Run pip-audit vulnerability scan
      run: |
        uv tool install pip-audit
        uv run pip-audit --desc --format json --output pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          pip-audit-report.json

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        echo "All checks passed successfully!"
        if [ -n "$SLACK_WEBHOOK" ]; then
          echo "Would notify Slack (webhook configured)"
        fi
        
    - name: Notify failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        echo "Some checks failed!"
        if [ -n "$SLACK_WEBHOOK" ]; then
          echo "Would notify Slack about failure (webhook configured)"
        fi
